@use "../utilities/variables";
@use "../mixins/pseudo";
@use "../mixins/buttonGradient";

section.hero {
    min-height: 50vw;
    padding-right: variables.$paddingGutter;
    padding-left: variables.$paddingGutter;

    div.hero-content {
        grid-template-areas: "typing image" "buttons empty";
        grid-template-columns: auto 1fr;
    }

    div.hero-typing-container {
        grid-area: typing;
        width: clamp(65rem, 55%, 100%);
    }

    div.hero-typing, div.hero-typing > div:not(.hero-typing-background) {
        grid-template-columns: 1fr;
        max-width: 70rem;

        > div {
            grid-column: 1/-1;
            grid-row: 1/-1;
        }

        > p {
            &.hero-tag {
                color: var(--primary);
                font-size: 2.4rem;
                font-weight: 300;
            }

            &.hero-main {
                margin-bottom: 0;
                padding: 2.4rem 2.4rem 2.4rem 5.4rem;
                font-family: var(--font-headings);
                font-size: 4.8rem;
                font-weight: 600;
                line-height: unset;
            }
        }
    }

    div.hero-cta {
        grid-area: buttons;
        padding: 2.4rem 2.4rem 2.4rem 5.4rem;
        font-family: var(--font-buttons);
        font-size: 2.4rem;

        > button {
            &.animation-start {
                &:nth-of-type(2) {
                    animation-delay: 0.5s;
                }
            }
        }
    }

    div.hero-typing-background {
        left: 24px;
        grid-column: auto;
        grid-row: auto;
        opacity: 0.65;
        font-family: var(--font-code);
        font-size: 0.8rem;
        white-space: pre;
    }

    div.hero-particles-background {
        > div {
            width: 100%;
            height: 100%;
        }
    }
}

div.hero-image {
    position: relative;
    grid-area: image;
    align-self: center;
    max-width: 25rem;
    justify-self: center;
    aspect-ratio: 1;

    > img {
        position: relative;
        z-index: 1;
        overflow: hidden;
        border-radius: 50%;
    }

    &:before {
        $borderThickness: 1rem;
        @include pseudo.pseudoMixinAbsolute($width: calc(100% + $borderThickness), $height: calc(100% + $borderThickness), $top: $borderThickness/-2, $left: $borderThickness/-2);
        @include buttonGradient.buttonGradientMixin;
        border-radius: 50%;
    }
}
